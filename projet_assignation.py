# -*- coding: utf-8 -*-
"""projet_assignation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1J1xNQWUMbAZcUGL2Q5yYtRBV_BN0_ncw
"""

import pymol2
from pymol import cmd

import matplotlib.pyplot as plt
import numpy as np

from Bio.PDB import PDBParser
from Bio.PDB.DSSP import DSSP
from Bio.PDB import PDBList
from Bio.PDB import *

"""#Projet Assignation des caractéristiques structurales des protéines

#If file doesn't contain H
"""

def add_hydrogen(file_no_H):
  name=str(file_no_H)
  name = name.replace('.pdb', '')
  pymol.cmd.load(file_no_H, 'myprotein') # file
  pymol.cmd.h_add()
  pymol.cmd.save('{}_H_pymol.pdb'.format(name))

"""#File with H"""

def get_H_coord(file):
  
  nom=str(file)
  nom = nom.replace('.pdb', '')
  parser = PDBParser()
  structure = parser.get_structure(nom, file)

  arr_name1 = np.array([])
  arr_coord1 = np.array([])

  p = PDBParser()
  for model in structure:
      #print("Model : ", model)
      for chain in model:
          #print("Chaîne : ", chain)
          for residue in chain:
              #print("Résidu : ", residue)
              for atom in residue:
                #print(atom)
                name = atom.get_name()
                coord = atom.get_coord()
                if name.startswith('N'):
                  arr_name1= np.append(arr_name1, name)
                  arr_coord1 = np.append(arr_coord1, coord)

  nb_rows = int(len(arr_coord1)/3)  
  print(nb_rows)
  arr_coord2 = arr_coord1.reshape(nb_rows,3)          
  arr_name2 = arr_name1.reshape(nb_rows,1)
  return arr_coord2

def plot_H(file):
  fig = plt.figure()
  ax = fig.add_subplot(projection='3d')
  xs = get_H_coord(file)[:,0]
  ys = get_H_coord(file)[:,1]
  zs = get_H_coord(file)[:,2]
  ax.scatter(xs, ys, zs)
  ax.set_xlabel('Axe x')
  ax.set_ylabel('Axe y')
  ax.set_zlabel('Axe Z')

  plt.show()

"""#dssp"""

def get_dssp(file):
  p = PDBParser()

  structure = p.get_structure(i, file)
  model = structure[0]
  # calculate DSSP
  dssp = DSSP(model, file , file_type='PDB')
  # extract sequence and secondary structure from the DSSP tuple
  sequence = ''
  sec_structure = ''
  for z in range(len(dssp)):
      a_key = list(dssp.keys())[z]
      sequence += dssp[a_key][1]
      sec_structure += dssp[a_key][2]

  list_phi = []
  list_psi = []
  pp2 = []

  # collect psi and phi angles from res
  for res in range(len(dssp)):
      #indique le résidu
      a_key = list(dssp.keys())[res]
      phi = dssp[a_key][4]
      psi = dssp[a_key][5]
      if phi <= -46 and phi >= -104 :
        if psi <= -174 and phi >= -116 :
          pp2.append(dssp[a_key][0])
          pp2.append(dssp[a_key][1])

  # simplify to 3-states : 
  # H for (G, H and I)
  sec_structure = sec_structure.replace('I', 'H')
  sec_structure = sec_structure.replace('G', 'H')
  # E for (E and B)
  sec_structure = sec_structure.replace('B', 'E')
  # C for (S, T, and C)
  sec_structure = sec_structure.replace('T', 'C')
  sec_structure = sec_structure.replace('S', 'C')

  #si liste vide
  if not pp2:
    print("La protéine ne contient pas de PPII.")
  #ou non
  else:
    #print(pp2)
    #list of integers
    nt = []
    for j in range(0,len(pp2), 2):
      nt.append(pp2[j])
    print("Liste des numéros des résidus PPII :\n", nt)
  
  return "\nStructure secondaire :\n{}".format(sec_structure)

dssp_seq = get_dssp(file)

print(dssp_seq)